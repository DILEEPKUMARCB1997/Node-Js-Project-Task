// const data =
//   "300302010004056d65656e61a42f060a2b060104019d2b00000f40040a00320c0201030201034302040b3011300f060a2b06"; // Your hexadecimal data

// const buffer = Buffer.from(data, "hex");

// // Extract integers from the buffer
// const integers = [];
// for (let i = 0; i < buffer.length; i += 4) {
//   integers.push(buffer.readUInt16BE(i));
// }

// console.log(integers);



// const buffer = new Uint8Array([0x30, 0x3b, 0x02, 0x01, 0x00, 0x04, 0x05, 0x6d, 0x65, 0x65, 0x6e, 0x61, 0xa4, 0x2f, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x9d, 0x2b, 0x00, 0x00, 0x0f, 0x40, 0x04, 0x0a, 0x00, 0x32, 0x0c, 0x02, 0x01, 0x03, 0x02, 0x01, 0x03, 0x43, 0x02, 0x04, 0x0b, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x0a, 0x2b, 0x0 ]);
// const dataView = new DataView(buffer.buffer);
// const integers = [];

// for (let i = 0; i < buffer.length; i += 4) {
//     const isLittleEndian = true; // or false for big-endian systems
//     const integer = dataView.getInt32(i, isLittleEndian);
//     integers.push(integer);
// }

// console.log(integers);


// const bufferData = Buffer.from([
//   0x30, 0x2b, 0x02, 0x01, 0x00, 0x04, 0x05, 0x76, 0x65, 0x65, 0x6e, 0x61, 0xa4,
//   0x1f, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x9d, 0x2b, 0x00, 0x00, 0x0f,
//   0x40, 0x04, 0x0a, 0x00, 0x32, 0x0c, 0x02, 0x01, 0x04, 0x02, 0x01, 0x00, 0x43,
//   0x03, 0x0e, 0x3c, 0x5a, 0x30, 0x00,
// ]);

// console.log(bufferData.readUInt32LE(0).toString(16));



// const hex = '6e';
// const integer = parseInt(hex, 16);
// console.log(integer); // Output: 110
/*
// Extracting string value
const stringValue = bufferData.toString("utf8");

// Extracting integer value
const integerArray = bufferData.slice(8, 12);
const integerValue = integerArray.readUInt32BE();

console.log("String Value:", stringValue);
console.log("Integer Value:", integerValue);


const bufferData1 = Buffer.from([
  0x30, 0x2b, 0x02, 0x01, 0x00, 0x04, 0x05, 0x76, 0x65, 0x65, 0x6e, 0x61, 0xa4,
  0x1f, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x9d, 0x2b, 0x00, 0x00, 0x0f,
  0x40, 0x04, 0x0a, 0x00, 0x32, 0x0c, 0x02, 0x01, 0x04, 0x02, 0x01, 0x00, 0x43,
  0x03, 0x0e, 0x3c, 0x5a, 0x30, 0x00,
]);

const integer = bufferData1.readUInt32BE(0);
console.log(integer);
*/
